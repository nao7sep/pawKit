using System;
using System.Text.Json;
using System.Collections.Generic;
using pawKitLib.Conversion;
using System.Numerics;

namespace pawKitLib.Models
{
    /// <summary>
    /// Extension methods for DynamicDto to make ExtraProperties easier to use.
    /// These methods are generated by AI and cover all standard .NET value types supported by ValueTypeConverter.
    /// This comprehensive approach does not violate the YAGNI principle: .NET's value types are highly stable and widely used.
    /// Implementing all methods up front avoids the overhead of repeatedly checking which types are supported and incrementally adding them as needed.
    /// By leveraging AI to generate the full set, the codebase remains consistent, future-proof, and easier to maintain.
    /// These are not instance methods; we use extensions to keep data and helpers separate (separation of concerns).
    /// </summary>
    public static class DynamicDtoExtensions
    {
        // Boolean
        public static void SetBool(this DynamicDto dto, string key, bool value) =>
            dto.ExtraProperties[key] = JsonDocument.Parse($"\"{ValueTypeConverter.ToString(value)}\"").RootElement;
        public static bool GetBool(this DynamicDto dto, string key)
        {
            if (!dto.ExtraProperties.TryGetValue(key, out var value))
                throw new KeyNotFoundException($"Key '{key}' not found.");
            if (value.ValueKind == JsonValueKind.True) return true;
            if (value.ValueKind == JsonValueKind.False) return false;
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.ParseBool(value.GetString()!);
            throw new InvalidCastException($"Value for '{key}' is not a boolean.");
        }
        public static bool TryGetBool(this DynamicDto dto, string key, out bool result)
        {
            result = default;
            if (!dto.ExtraProperties.TryGetValue(key, out var value)) return false;
            if (value.ValueKind == JsonValueKind.True) { result = true; return true; }
            if (value.ValueKind == JsonValueKind.False) { result = false; return true; }
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.TryParseBool(value.GetString()!, out result);
            return false;
        }

        // Byte
        public static void SetByte(this DynamicDto dto, string key, byte value) =>
            dto.ExtraProperties[key] = JsonDocument.Parse(ValueTypeConverter.ToString(value)).RootElement;
        public static byte GetByte(this DynamicDto dto, string key)
        {
            if (!dto.ExtraProperties.TryGetValue(key, out var value))
                throw new KeyNotFoundException($"Key '{key}' not found.");
            if (value.ValueKind == JsonValueKind.Number && value.TryGetByte(out var result)) return result;
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.ParseByte(value.GetString()!);
            throw new InvalidCastException($"Value for '{key}' is not a byte.");
        }
        public static bool TryGetByte(this DynamicDto dto, string key, out byte result)
        {
            result = default;
            if (!dto.ExtraProperties.TryGetValue(key, out var value)) return false;
            if (value.ValueKind == JsonValueKind.Number && value.TryGetByte(out result)) return true;
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.TryParseByte(value.GetString()!, out result);
            return false;
        }

        // SByte
        public static void SetSByte(this DynamicDto dto, string key, sbyte value) =>
            dto.ExtraProperties[key] = JsonDocument.Parse(ValueTypeConverter.ToString(value)).RootElement;
        public static sbyte GetSByte(this DynamicDto dto, string key)
        {
            if (!dto.ExtraProperties.TryGetValue(key, out var value))
                throw new KeyNotFoundException($"Key '{key}' not found.");
            if (value.ValueKind == JsonValueKind.Number && value.TryGetSByte(out var result)) return result;
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.ParseSByte(value.GetString()!);
            throw new InvalidCastException($"Value for '{key}' is not an sbyte.");
        }
        public static bool TryGetSByte(this DynamicDto dto, string key, out sbyte result)
        {
            result = default;
            if (!dto.ExtraProperties.TryGetValue(key, out var value)) return false;
            if (value.ValueKind == JsonValueKind.Number && value.TryGetSByte(out result)) return true;
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.TryParseSByte(value.GetString()!, out result);
            return false;
        }

        // Short
        public static void SetShort(this DynamicDto dto, string key, short value) =>
            dto.ExtraProperties[key] = JsonDocument.Parse(ValueTypeConverter.ToString(value)).RootElement;
        public static short GetShort(this DynamicDto dto, string key)
        {
            if (!dto.ExtraProperties.TryGetValue(key, out var value))
                throw new KeyNotFoundException($"Key '{key}' not found.");
            if (value.ValueKind == JsonValueKind.Number && value.TryGetInt16(out var result)) return result;
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.ParseShort(value.GetString()!);
            throw new InvalidCastException($"Value for '{key}' is not a short.");
        }
        public static bool TryGetShort(this DynamicDto dto, string key, out short result)
        {
            result = default;
            if (!dto.ExtraProperties.TryGetValue(key, out var value)) return false;
            if (value.ValueKind == JsonValueKind.Number && value.TryGetInt16(out result)) return true;
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.TryParseShort(value.GetString()!, out result);
            return false;
        }

        // UShort
        public static void SetUShort(this DynamicDto dto, string key, ushort value) =>
            dto.ExtraProperties[key] = JsonDocument.Parse(ValueTypeConverter.ToString(value)).RootElement;
        public static ushort GetUShort(this DynamicDto dto, string key)
        {
            if (!dto.ExtraProperties.TryGetValue(key, out var value))
                throw new KeyNotFoundException($"Key '{key}' not found.");
            if (value.ValueKind == JsonValueKind.Number && value.TryGetUInt16(out var result)) return result;
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.ParseUShort(value.GetString()!);
            throw new InvalidCastException($"Value for '{key}' is not a ushort.");
        }
        public static bool TryGetUShort(this DynamicDto dto, string key, out ushort result)
        {
            result = default;
            if (!dto.ExtraProperties.TryGetValue(key, out var value)) return false;
            if (value.ValueKind == JsonValueKind.Number && value.TryGetUInt16(out result)) return true;
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.TryParseUShort(value.GetString()!, out result);
            return false;
        }

        // Int
        public static void SetInt(this DynamicDto dto, string key, int value) =>
            dto.ExtraProperties[key] = JsonDocument.Parse(ValueTypeConverter.ToString(value)).RootElement;
        public static int GetInt(this DynamicDto dto, string key)
        {
            if (!dto.ExtraProperties.TryGetValue(key, out var value))
                throw new KeyNotFoundException($"Key '{key}' not found.");
            if (value.ValueKind == JsonValueKind.Number && value.TryGetInt32(out var result)) return result;
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.ParseInt(value.GetString()!);
            throw new InvalidCastException($"Value for '{key}' is not an int.");
        }
        public static bool TryGetInt(this DynamicDto dto, string key, out int result)
        {
            result = default;
            if (!dto.ExtraProperties.TryGetValue(key, out var value)) return false;
            if (value.ValueKind == JsonValueKind.Number && value.TryGetInt32(out result)) return true;
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.TryParseInt(value.GetString()!, out result);
            return false;
        }

        // UInt
        public static void SetUInt(this DynamicDto dto, string key, uint value) =>
            dto.ExtraProperties[key] = JsonDocument.Parse(ValueTypeConverter.ToString(value)).RootElement;
        public static uint GetUInt(this DynamicDto dto, string key)
        {
            if (!dto.ExtraProperties.TryGetValue(key, out var value))
                throw new KeyNotFoundException($"Key '{key}' not found.");
            if (value.ValueKind == JsonValueKind.Number && value.TryGetUInt32(out var result)) return result;
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.ParseUInt(value.GetString()!);
            throw new InvalidCastException($"Value for '{key}' is not a uint.");
        }
        public static bool TryGetUInt(this DynamicDto dto, string key, out uint result)
        {
            result = default;
            if (!dto.ExtraProperties.TryGetValue(key, out var value)) return false;
            if (value.ValueKind == JsonValueKind.Number && value.TryGetUInt32(out result)) return true;
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.TryParseUInt(value.GetString()!, out result);
            return false;
        }

        // Long
        public static void SetLong(this DynamicDto dto, string key, long value) =>
            dto.ExtraProperties[key] = JsonDocument.Parse(ValueTypeConverter.ToString(value)).RootElement;
        public static long GetLong(this DynamicDto dto, string key)
        {
            if (!dto.ExtraProperties.TryGetValue(key, out var value))
                throw new KeyNotFoundException($"Key '{key}' not found.");
            if (value.ValueKind == JsonValueKind.Number && value.TryGetInt64(out var result)) return result;
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.ParseLong(value.GetString()!);
            throw new InvalidCastException($"Value for '{key}' is not a long.");
        }
        public static bool TryGetLong(this DynamicDto dto, string key, out long result)
        {
            result = default;
            if (!dto.ExtraProperties.TryGetValue(key, out var value)) return false;
            if (value.ValueKind == JsonValueKind.Number && value.TryGetInt64(out result)) return true;
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.TryParseLong(value.GetString()!, out result);
            return false;
        }

        // ULong
        public static void SetULong(this DynamicDto dto, string key, ulong value) =>
            dto.ExtraProperties[key] = JsonDocument.Parse(ValueTypeConverter.ToString(value)).RootElement;
        public static ulong GetULong(this DynamicDto dto, string key)
        {
            if (!dto.ExtraProperties.TryGetValue(key, out var value))
                throw new KeyNotFoundException($"Key '{key}' not found.");
            if (value.ValueKind == JsonValueKind.Number && value.TryGetUInt64(out var result)) return result;
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.ParseULong(value.GetString()!);
            throw new InvalidCastException($"Value for '{key}' is not a ulong.");
        }
        public static bool TryGetULong(this DynamicDto dto, string key, out ulong result)
        {
            result = default;
            if (!dto.ExtraProperties.TryGetValue(key, out var value)) return false;
            if (value.ValueKind == JsonValueKind.Number && value.TryGetUInt64(out result)) return true;
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.TryParseULong(value.GetString()!, out result);
            return false;
        }

        // Float
        public static void SetFloat(this DynamicDto dto, string key, float value) =>
            dto.ExtraProperties[key] = JsonDocument.Parse(ValueTypeConverter.ToString(value)).RootElement;
        public static float GetFloat(this DynamicDto dto, string key)
        {
            if (!dto.ExtraProperties.TryGetValue(key, out var value))
                throw new KeyNotFoundException($"Key '{key}' not found.");
            if (value.ValueKind == JsonValueKind.Number && value.TryGetSingle(out var result)) return result;
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.ParseFloat(value.GetString()!);
            throw new InvalidCastException($"Value for '{key}' is not a float.");
        }
        public static bool TryGetFloat(this DynamicDto dto, string key, out float result)
        {
            result = default;
            if (!dto.ExtraProperties.TryGetValue(key, out var value)) return false;
            if (value.ValueKind == JsonValueKind.Number && value.TryGetSingle(out result)) return true;
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.TryParseFloat(value.GetString()!, out result);
            return false;
        }

        // Double
        public static void SetDouble(this DynamicDto dto, string key, double value) =>
            dto.ExtraProperties[key] = JsonDocument.Parse(ValueTypeConverter.ToString(value)).RootElement;
        public static double GetDouble(this DynamicDto dto, string key)
        {
            if (!dto.ExtraProperties.TryGetValue(key, out var value))
                throw new KeyNotFoundException($"Key '{key}' not found.");
            if (value.ValueKind == JsonValueKind.Number && value.TryGetDouble(out var result)) return result;
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.ParseDouble(value.GetString()!);
            throw new InvalidCastException($"Value for '{key}' is not a double.");
        }
        public static bool TryGetDouble(this DynamicDto dto, string key, out double result)
        {
            result = default;
            if (!dto.ExtraProperties.TryGetValue(key, out var value)) return false;
            if (value.ValueKind == JsonValueKind.Number && value.TryGetDouble(out result)) return true;
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.TryParseDouble(value.GetString()!, out result);
            return false;
        }

        // Decimal
        public static void SetDecimal(this DynamicDto dto, string key, decimal value) =>
            dto.ExtraProperties[key] = JsonDocument.Parse(ValueTypeConverter.ToString(value)).RootElement;
        public static decimal GetDecimal(this DynamicDto dto, string key)
        {
            if (!dto.ExtraProperties.TryGetValue(key, out var value))
                throw new KeyNotFoundException($"Key '{key}' not found.");
            if (value.ValueKind == JsonValueKind.Number && value.TryGetDecimal(out var result)) return result;
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.ParseDecimal(value.GetString()!);
            throw new InvalidCastException($"Value for '{key}' is not a decimal.");
        }
        public static bool TryGetDecimal(this DynamicDto dto, string key, out decimal result)
        {
            result = default;
            if (!dto.ExtraProperties.TryGetValue(key, out var value)) return false;
            if (value.ValueKind == JsonValueKind.Number && value.TryGetDecimal(out result)) return true;
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.TryParseDecimal(value.GetString()!, out result);
            return false;
        }

        // Char
        public static void SetChar(this DynamicDto dto, string key, char value) =>
            dto.ExtraProperties[key] = JsonDocument.Parse($"\"{ValueTypeConverter.ToString(value)}\"").RootElement;
        public static char GetChar(this DynamicDto dto, string key)
        {
            if (!dto.ExtraProperties.TryGetValue(key, out var value))
                throw new KeyNotFoundException($"Key '{key}' not found.");
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.ParseChar(value.GetString()!);
            throw new InvalidCastException($"Value for '{key}' is not a char.");
        }
        public static bool TryGetChar(this DynamicDto dto, string key, out char result)
        {
            result = default;
            if (!dto.ExtraProperties.TryGetValue(key, out var value)) return false;
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.TryParseChar(value.GetString()!, out result);
            return false;
        }

        // String
        public static void SetString(this DynamicDto dto, string key, string value) =>
            dto.ExtraProperties[key] = JsonDocument.Parse($"\"{value}\"").RootElement;

        public static string GetString(this DynamicDto dto, string key)
        {
            if (!dto.ExtraProperties.TryGetValue(key, out var value))
                throw new KeyNotFoundException($"Key '{key}' not found.");
            if (value.ValueKind == JsonValueKind.String) return value.GetString()!;
            throw new InvalidCastException($"Value for '{key}' is not a string.");
        }

        public static bool TryGetString(this DynamicDto dto, string key, out string? result)
        {
            result = null;
            if (!dto.ExtraProperties.TryGetValue(key, out var value)) return false;
            if (value.ValueKind == JsonValueKind.String) { result = value.GetString(); return true; }
            return false;
        }

        // Guid
        public static void SetGuid(this DynamicDto dto, string key, Guid value) =>
            dto.ExtraProperties[key] = JsonDocument.Parse($"\"{ValueTypeConverter.ToString(value)}\"").RootElement;
        public static Guid GetGuid(this DynamicDto dto, string key)
        {
            if (!dto.ExtraProperties.TryGetValue(key, out var value))
                throw new KeyNotFoundException($"Key '{key}' not found.");
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.ParseGuid(value.GetString()!);
            throw new InvalidCastException($"Value for '{key}' is not a Guid.");
        }
        public static bool TryGetGuid(this DynamicDto dto, string key, out Guid result)
        {
            result = default;
            if (!dto.ExtraProperties.TryGetValue(key, out var value)) return false;
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.TryParseGuid(value.GetString()!, out result);
            return false;
        }

        // DateTime
        public static void SetDateTime(this DynamicDto dto, string key, DateTime value) =>
            dto.ExtraProperties[key] = JsonDocument.Parse($"\"{ValueTypeConverter.ToString(value)}\"").RootElement;
        public static DateTime GetDateTime(this DynamicDto dto, string key)
        {
            if (!dto.ExtraProperties.TryGetValue(key, out var value))
                throw new KeyNotFoundException($"Key '{key}' not found.");
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.ParseDateTime(value.GetString()!);
            throw new InvalidCastException($"Value for '{key}' is not a DateTime.");
        }
        public static bool TryGetDateTime(this DynamicDto dto, string key, out DateTime result)
        {
            result = default;
            if (!dto.ExtraProperties.TryGetValue(key, out var value)) return false;
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.TryParseDateTime(value.GetString()!, out result);
            return false;
        }

        // DateTimeOffset
        public static void SetDateTimeOffset(this DynamicDto dto, string key, DateTimeOffset value) =>
            dto.ExtraProperties[key] = JsonDocument.Parse($"\"{ValueTypeConverter.ToString(value)}\"").RootElement;
        public static DateTimeOffset GetDateTimeOffset(this DynamicDto dto, string key)
        {
            if (!dto.ExtraProperties.TryGetValue(key, out var value))
                throw new KeyNotFoundException($"Key '{key}' not found.");
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.ParseDateTimeOffset(value.GetString()!);
            throw new InvalidCastException($"Value for '{key}' is not a DateTimeOffset.");
        }
        public static bool TryGetDateTimeOffset(this DynamicDto dto, string key, out DateTimeOffset result)
        {
            result = default;
            if (!dto.ExtraProperties.TryGetValue(key, out var value)) return false;
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.TryParseDateTimeOffset(value.GetString()!, out result);
            return false;
        }

        // TimeSpan
        public static void SetTimeSpan(this DynamicDto dto, string key, TimeSpan value) =>
            dto.ExtraProperties[key] = JsonDocument.Parse($"\"{ValueTypeConverter.ToString(value)}\"").RootElement;
        public static TimeSpan GetTimeSpan(this DynamicDto dto, string key)
        {
            if (!dto.ExtraProperties.TryGetValue(key, out var value))
                throw new KeyNotFoundException($"Key '{key}' not found.");
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.ParseTimeSpan(value.GetString()!);
            throw new InvalidCastException($"Value for '{key}' is not a TimeSpan.");
        }
        public static bool TryGetTimeSpan(this DynamicDto dto, string key, out TimeSpan result)
        {
            result = default;
            if (!dto.ExtraProperties.TryGetValue(key, out var value)) return false;
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.TryParseTimeSpan(value.GetString()!, out result);
            return false;
        }

        // Enum
        public static void SetEnum<TEnum>(this DynamicDto dto, string key, TEnum value) where TEnum : struct, Enum =>
            dto.ExtraProperties[key] = JsonDocument.Parse($"\"{ValueTypeConverter.ToString(value)}\"").RootElement;
        public static TEnum GetEnum<TEnum>(this DynamicDto dto, string key) where TEnum : struct, Enum
        {
            if (!dto.ExtraProperties.TryGetValue(key, out var value))
                throw new KeyNotFoundException($"Key '{key}' not found.");
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.ParseEnum<TEnum>(value.GetString()!);
            throw new InvalidCastException($"Value for '{key}' is not a {typeof(TEnum).Name} enum.");
        }
        public static bool TryGetEnum<TEnum>(this DynamicDto dto, string key, out TEnum result) where TEnum : struct, Enum
        {
            result = default;
            if (!dto.ExtraProperties.TryGetValue(key, out var value)) return false;
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.TryParseEnum<TEnum>(value.GetString()!, out result);
            return false;
        }

        // BigInteger
        public static void SetBigInteger(this DynamicDto dto, string key, BigInteger value) =>
            dto.ExtraProperties[key] = JsonDocument.Parse(ValueTypeConverter.ToString(value)).RootElement;
        public static BigInteger GetBigInteger(this DynamicDto dto, string key)
        {
            if (!dto.ExtraProperties.TryGetValue(key, out var value))
                throw new KeyNotFoundException($"Key '{key}' not found.");
            if (value.ValueKind == JsonValueKind.Number && value.TryGetInt64(out var result)) return new BigInteger(result);
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.ParseBigInteger(value.GetString()!);
            throw new InvalidCastException($"Value for '{key}' is not a BigInteger.");
        }
        public static bool TryGetBigInteger(this DynamicDto dto, string key, out BigInteger result)
        {
            result = default;
            if (!dto.ExtraProperties.TryGetValue(key, out var value)) return false;
            if (value.ValueKind == JsonValueKind.Number && value.TryGetInt64(out var longResult)) { result = new BigInteger(longResult); return true; }
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.TryParseBigInteger(value.GetString()!, out result);
            return false;
        }

        // Uri
        public static void SetUri(this DynamicDto dto, string key, Uri value) =>
            dto.ExtraProperties[key] = JsonDocument.Parse($"\"{ValueTypeConverter.ToString(value)}\"").RootElement;
        public static Uri GetUri(this DynamicDto dto, string key)
        {
            if (!dto.ExtraProperties.TryGetValue(key, out var value))
                throw new KeyNotFoundException($"Key '{key}' not found.");
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.ParseUri(value.GetString()!);
            throw new InvalidCastException($"Value for '{key}' is not a Uri.");
        }
        public static bool TryGetUri(this DynamicDto dto, string key, out Uri? result)
        {
            result = null;
            if (!dto.ExtraProperties.TryGetValue(key, out var value)) return false;
            if (value.ValueKind == JsonValueKind.String) return ValueTypeConverter.TryParseUri(value.GetString()!, out result);
            return false;
        }
    }
}
